$icon-font-family: koment;
$icon-font-path: 'fonts' !default;

@font-face {
  font-family: $icon-font-family;
  src: url('#{$icon-font-path}/koment.eot?#iefix') format('eot');
}

@font-face {
  font-family: $icon-font-family;
  src: url('#{$icon-font-path}/koment.eot?jbzfxp');
  src: url('#{$icon-font-path}/koment.eot?jbzfxp#iefix') format('embedded-opentype'),
  url('#{$icon-font-path}/koment.ttf?jbzfxp') format('truetype'),
  url('#{$icon-font-path}/koment.woff?jbzfxp') format('woff'),
  url('#{$icon-font-path}/koment.svg?jbzfxp#koment') format('svg');
  font-weight: normal;
  font-style: normal;
}

// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#maps
$icons: (
        koment: '\e900'
);

// NOTE: This is as complex as we want to get with SCSS functionality.
//
// Now that we have a map of icons above, we can iterate over that map and create an icon class
// for each icon in that list. The iterator below produces CSS classes like this:
//
// .vjs-icon-play {
//   font-family: VideoJS;
//   font-weight: normal;
//   font-style: normal;
// }
// .vjs-icon-play:before { content: "\25b6"; }
//
// We can then use @extend in the codebase when we need to add an icon to a class. @extend builds up
// the selectors for you so you can avoid duplication. This is generally a bad idea, but since each
// icon should only be extended one or two other places, we'll roll with it.
@each $name, $content in $icons {
  .vjs-icon-#{$name} {
    font-family: $icon-font-family;
    font-weight: normal;
    font-style: normal;

    &:before {
      content: $content;
    }
  }
}

.video-js .vjs-koment-button {
  cursor: pointer;

  font-size: 0.7em;

  @extend .vjs-icon-koment;

  &:before {
    line-height: 2.3;
  }

  &.connected {
    color: #66A8CC;
  }
  &.error {
    color: #c70000;
  }
}
